// ============================================
// SOGAS-RH - Prisma Schema
// ============================================
// Module 1 : Authentification & RBAC
// Base de données : MySQL
// ============================================

// Configuration de la source de données
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Configuration du générateur de client Prisma
generator client {
  provider = "prisma-client-js"
}

// ============================================
// USERS & AUTHENTICATION
// ============================================

/// Utilisateur de l'application
model User {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String    @db.VarChar(255)
  firstName    String    @db.VarChar(100)
  lastName     String    @db.VarChar(100)
  isActive     Boolean   @default(true)
  
  // Relations
  roleLinks    UserRole[]
  sessions     Session[]
  
  // Métadonnées
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  @@map("users")
}

// ============================================
// RBAC (Role-Based Access Control)
// ============================================

/// Rôle attribué aux utilisateurs
model Role {
  id        String   @id @default(cuid())
  name      String   @unique @db.VarChar(100)
  
  // Relations
  rolePerms RolePermission[]
  userLinks UserRole[]
  
  // Métadonnées
  createdAt DateTime @default(now())
  
  @@map("roles")
}

/// Permission attribuée aux rôles
model Permission {
  id        String   @id @default(cuid())
  name      String   @unique @db.VarChar(100)
  
  // Relations
  rolePerms RolePermission[]
  
  // Métadonnées
  createdAt DateTime @default(now())
  
  @@map("permissions")
}

/// Table de liaison Many-to-Many : User <-> Role
model UserRole {
  userId String
  roleId String
  
  // Relations
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@id([userId, roleId])
  @@index([roleId])
  @@map("user_roles")
}

/// Table de liaison Many-to-Many : Role <-> Permission
model RolePermission {
  roleId       String
  permissionId String
  
  // Relations
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@id([roleId, permissionId])
  @@index([permissionId])
  @@map("role_permissions")
}

// ============================================
// SESSIONS & TOKEN MANAGEMENT
// ============================================

/// Session utilisateur avec Refresh Token
model Session {
  id                String    @id @default(cuid())
  userId            String
  currentRefreshJti String    @db.VarChar(255)
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Métadonnées
  createdAt         DateTime  @default(now())
  revokedAt         DateTime?
  
  @@index([userId])
  @@map("sessions")
}

/// Tokens révoqués (blacklist JWT)
model RevokedToken {
  jti       String   @id @db.VarChar(255)
  revokedAt DateTime @default(now())
  
  @@map("revoked_tokens")
}